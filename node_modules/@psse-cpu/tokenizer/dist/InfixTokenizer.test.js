"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const InfixTokenizer_1 = __importDefault(require("./InfixTokenizer"));
describe('InfixTokenizer', () => {
    it('does not tokenize empty strings', () => {
        expect(new InfixTokenizer_1.default('').hasMoreTokens()).toBe(false);
    });
    it('tokenizes simple expressions', () => {
        const tokenizer = new InfixTokenizer_1.default('3+4');
        expect(tokenizer.hasMoreTokens()).toBe(true);
        expect(tokenizer.readToken()).toBe('3');
        expect(tokenizer.hasMoreTokens()).toBe(true);
        expect(tokenizer.readToken()).toBe('+');
        expect(tokenizer.hasMoreTokens()).toBe(true);
        expect(tokenizer.readToken()).toBe('4');
        expect(tokenizer.hasMoreTokens()).toBe(false);
        expect(tokenizer.readToken()).toBe(undefined);
    });
    it('parses for valid tokens', () => {
        const tokenizer = new InfixTokenizer_1.default('((33 - 7) / sin(    90/3 ) + 24.53 ^ 2) * ln(1)');
        const tokens = [];
        while (tokenizer.hasMoreTokens()) {
            tokens.push(tokenizer.readToken());
        }
        expect(tokens).toEqual([
            '(',
            '(',
            '33',
            '-',
            '7',
            ')',
            '/',
            'sin',
            '(',
            '90',
            '/',
            '3',
            ')',
            '+',
            '24.53',
            '^',
            '2',
            ')',
            '*',
            'ln',
            '(',
            '1',
            ')'
        ]);
    });
});
